# Packages
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from abc import ABC, abstractmethod #OOP package, ABC is abstract base class

# Inheritance, if there's overlapping self.var
# Base class, an abstract idea, where sub-classes down below inherit to make it actionable
# Certain method in base class that sub classes have to implement
# Make each subclass override that method
class Mining(ABC):
    def __init__(self, name): # Inherit attribute
        self.name = name
    @abstractmethod
    def tax_rate(self): # Inherit method
        pass

# Pay check for miners
class Employee(Mining):

    def __init__(self, name, salary, status, position):
        super().__init__(name)
        self.salary = salary
        self.status = status
        self.position = position

    def monthly_salary(self):
        return self.salary/12

    # Another instance method and this is a function nested in the class
    def getsalary(self):
        if hasattr(self, "_raise"):
            return self.salary + (self.salary * self._raise)
        else:
            return self.salary

    def setraisepercentage(self, amount):
        self._raise = amount

    def tax_rate(self):
        return self.salary * 1.25

Bob_Jones = Employee("Bob Jones", 50000, "Full_Time", "Associate")
print(Bob_Jones.name)
print(Bob_Jones.position)
print(Bob_Jones.salary)
print(Bob_Jones.tax_rate())




Bob_Jones.setraisepercentage(0.10) # 10% Discount
print(Bob_Jones.getsalary())

class Client(Mining):
    # method
    def __init__(self, name, payment):
        # assign attribute which is -> self. ,
        # what comes after = is the value not attribute
        super().__init__(name)
        if payment > 0:
            self.payment = payment
        else:
            self.payment = 0
            print("Did not pay yet")
        self.payment_date = datetime.today()

    def tax_rate(self):
        return self.payment * 1.13

Mike_Wallace = Client('Mike Wallace', 500)
print(Mike_Wallace.name)
print(Mike_Wallace.payment)
print(Mike_Wallace.payment_date)
print(Mike_Wallace.tax_rate())

##### Instance method, work on specific objects #####
class Materials:
    # Always done in class function, his just kinda of overrides the system so you can use it the way you want it to

    def __init__(self, type, price):
        # Instance attribute
        self.type = type
        self.price = price
    # Another instance method and this is a function nested in the class
    def getprice(self):
        if hasattr(self, "_discount"):
            return self.price - (self.price * self._discount)
        else:
            return self.price

    # This is where you are making useful methods
    # This is not part of the init function
    def setdiscount(self, amount):
        self._discount = amount # Underscore to indicate to other coders that's internal to the class and shouldn't be accessed from outside class's logic


# Create instances of class
# This can store a lot of different data
Gold = Materials("Gold", 7.54)
Silver = Materials("Silver", 3.82)
Diamond = Materials("Diamond", 4.50)
Ruby = Materials("Ruby", 3.20)

print(Gold) # Shows the class itself
print(Gold.type) # Shows its attribute
print(Gold.getprice()) # Using the function

Silver.setdiscount(0.25)
print(Silver.getprice())




##### Class method, work on entire class #####
class Manufacturing:

    Manufacturing_type = ("Aesthetic", "Energy")

    #Double undescore make this a private variable, hidden from other classes
    __manufacturing_list = None

    # The decorator works on a class instance not an object instance
    @classmethod
    def getmanufacturingtypes(cls):
        return cls.Manufacturing_type

    # Instance function
    def setTitle(self, newtitle):
        self.title = newtitle

    def __init__(self, title, type):
        self.title = title
        if (not type in Manufacturing.Manufacturing_type):
            raise ValueError(f"{type} is not a valid manufacturing type") # Useful for creating your own error message
        else:
            self.type = type
    # Static method
    @staticmethod
    def getmanufacturinglist():
        if Manufacturing.__manufacturing_list == None:
            Manufacturing.__manufacturing_list = []
        return Manufacturing.__manufacturing_list

# Class method
print("Manufacturing types: ", Manufacturing.getmanufacturingtypes())






# Static method, don't modify the state of the class or a specific object instance
# Not very useful except when you don't need to access any properties of a particular object or the class itself
# but where it makes sense for the method to belong to the class, name spacing, so putting it in appropriate levels local or global
# A global function in a class namespace
# Keep track of a list of books
#Static function, don't modify the class's state

m1 = Manufacturing("Title 1", "Aesthetic")
m2 = Manufacturing("Title 1", "Energy")
Manu = Manufacturing.getmanufacturinglist()
Manu.append(m1)
Manu.append(m2)
print(Manu)



class Utility:
    def __init__(self, cost):
        self.cost = cost

# Dictionary
utility_prices = {
    "Electricity": "$40",
    "Hydro": "$20",
    "Internet": "$10"
}

Lights = Utility(utility_prices["Electricity"])
print(Lights.cost)


# IN process
# diamond
#class Operation:
#    def __init__(self, ):
diamond = 0

while diamond == 0:
    print("digging...")
    diamond = np.random.randint(0, 2)

print("Found", np.random.randint(1, 8), "Diamond!")

# gold
gold = [0]
for x in range(10):
    mined = gold[-1]
    obtain = np.random.randint(0, 2)

    if obtain == 1:
        mined = mined + 1
    else:
        mined = mined

    gold.append(mined)

print("Amount of gold mined each day", gold)

plt.plot(gold)
plt.xlabel("Day")
plt.ylabel("Amount")
plt.title("Amount of gold mined per day")
plt.show()

x = lambda a: a + 10
print(x(5))

x = a + 10
